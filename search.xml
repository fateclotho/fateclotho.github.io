<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>text1</title>
      <link href="/2023/03/07/text1/"/>
      <url>/2023/03/07/text1/</url>
      
        <content type="html"><![CDATA[<p><strong>本文测试</strong></p><p>看到本文为测试</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>每日一句</title>
      <link href="/2022/03/25/Day12%20%E9%95%BF%E9%9A%BE%E5%8F%A5/"/>
      <url>/2022/03/25/Day12%20%E9%95%BF%E9%9A%BE%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="🌼Day12-长难句">🌼Day12 长难句</h2><p><img src="/2022/03/25/Day12%20%E9%95%BF%E9%9A%BE%E5%8F%A5/Day12.jpg" alt="Day12"></p>]]></content>
      
      
      <categories>
          
          <category> 长难句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 长难句 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发修改异常</title>
      <link href="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/"/>
      <url>/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="并发修改异常">并发修改异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，查找是否有&quot;three&quot;,如果有，就添加一个新元素</span></span><br><span class="line">        Iterator&lt;String&gt; it =  list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;three&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                list.add(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/%E5%B9%B6%E5%8F%91%E5%BC%82%E5%B8%B8.png" alt="并发异常"></p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/R-C.jpg" alt="R-C"></p><p>事与愿违？这样会报Exception,为什么呢，往下看：</p><p>我们知道异常分为很多种，那么 <span style="color:red"><b style="color:red;">ConcurrentModificationException</b></span>究竟是什么引起的?</p><p>我们不妨查找一下帮助文档</p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3.png" alt="帮助文档"></p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/24040bc4710613ecab0139e72a2f1ded.png" alt="24040bc4710613ecab0139e72a2f1ded"></p><p>我们再来看刚刚控制台报出的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line">at org.example.ListDemo.main(ListDemo.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/1.png" alt="1"></p><p>异常由程序21行的next()方法引起，又调用了<span style="color:red"><b>checkForComodification()</b></span>方法，引起的异常。而帮助文档中讲到</p><ul><li>某些迭代器实现（包括由JRE提供的所有通用集合实现的实现）可能会选择在检测到此行为时抛出此异常</li></ul><p>这让我们有理由怀疑是在迭代器方法里出了问题!!!</p><p>🔎接下来来点好康的，我们深入源码一探究竟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList的抽象父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">   <span class="comment">//protected修饰，子类可以访问</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//调用add方法,只是对expectedModCount进行了加1,</span></span><br><span class="line">    <span class="comment">//modCount值并未做修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> java.util.ArrayList.Itr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//modCount实际修改集合次数,expectedModCount预期修改集合的次数</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//next调用 checkForComodification();</span></span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = java.util.ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//判断modCount(实际)和expectedModCount(预期)是否相同，不同则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是从源码中拿出异常产生的几个方法，我们可以看到源程序中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (s.equals(<span class="string">&quot;three&quot;</span>))<span class="comment">//条件一旦满足，就会执行add()方法，</span></span><br><span class="line">                      <span class="comment">//调用add方法,只是对expectedModCount进行了加1,</span></span><br><span class="line">                     <span class="comment">//modCount值并未做修改</span></span><br><span class="line">         &#123;</span><br><span class="line">             list.add(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><blockquote><p>原来如此：list.add()方法，只修改了expectedModCount(预期)，而modCount(实际)并未修改！！！</p></blockquote><p>规避并发修改异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;three&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                list.add(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们可以使用for循环来改正，用list.get()方法来获取值。</p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/2.png" alt="2"></p><p>程序执行没有问题，所以get()方法避免了并发修改异常，至于是为什么，找到ArrayList中的get()源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>**☀️**真相大白了，在调用get()方法时，仅仅只是获取了索引，并未调<span style="color:red"><b>checkForComodification()</b></span>做检查。</p><h3 id="ListIterator">ListIterator</h3><p>查看帮助文档：</p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/pic2.png" alt="pic2"></p><p><img src="/2021/11/23/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8/pic3.png" alt="pic3"></p><p>⚡️<b>列表迭代器：</b></p><ul><li><p>通过List集合的ListIterator()方法得到，所以是List集合特有的迭代器</p></li><li><p>用于允许程序员沿任一方向遍历列表的列表的迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置。</p></li></ul><p>用列表迭代器中的方法执行上面Iterator的操作，看看结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;String&gt; Lit = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(Lit.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            String s = Lit.next();</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">&quot;three&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Lit.add(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>由于继承自Iterator，ListIterator也有hasNext()等方法，<span style="color:red"><b>注意了上面代码调用add()方法是可行的</b></span>，不会出现并发修改异常！！！</p><p>上面出现异常是用的List集合调用add()方法，这次用ListIterator中的add()方法，程序是可运行的，再整理出ListIterator相关源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//List接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">        <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//ArrayList的抽象父类</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">protected</span>  <span class="keyword">int</span> modCount = <span class="number">0</span>;  <span class="comment">//实际修改值</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">example</span>.<span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用listIterator()方法，返回ListItr对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//ListItr类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">ArrayList</span>.<span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    java.util.ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    lastRet = -<span class="number">1</span>;</span><br><span class="line">                    expectedModCount = modCount;<span class="comment">//将实际修改值赋给预期修改值</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>List调用listIterator()方法，返回ListItr对象，ListItr类中的add()方法虽然也调用了 checkForComodification()做检查，但是在add方法里<b>expectedModCount = modCount;</b>，又重新做了赋值。</p></blockquote><hr><p>⭐️下一篇，可能是关于spring MVC方面的总结</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《轨道》芥川龙之介</title>
      <link href="/2021/11/22/%E4%BB%8E0%E5%88%B01/"/>
      <url>/2021/11/22/%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h3 id="《轨道》-芥川龙之介">《轨道》-芥川龙之介</h3><p>良平八岁那年，小田原和热海之间开始铺设小火车轨道。他每天都去村边观看这项工程。说是工程，其实只是用斗车装运土方——不过良平正是对此颇感兴趣而跑去观看的。</p><p>装好了土的斗车上站着两个小工。斗车走的是下坡路，不用人推它自己就会飞跑起来。斗车摇晃着车的底座在前进，小工们那号衣的下摆随风飘荡，细长的路轨弯弯曲曲——瞅着这副情景，良平很想去当个土方小工。他还想和那些小工一起乘一下斗车，哪怕一次也是好的。斗车开到村边的平地上以后，就在那里自然而然地停下了。与此同时，小工们很轻巧地从斗车上跳下来，转眼间，就把车斗里的土全部倾倒在轨道的尽头处了。接下来，小工们便一步步推着斗车，开始朝来时的路登坡上山。此时良平心想，即使乘不了斗车，但只要能推推它也是好的呀。</p><p>有一天黄昏——那是2月上旬的时候，良平领着比自己小两岁的弟弟，以及一个和弟弟同岁的邻居家的小孩，一起到停着斗车的村边去。斗车粘满了泥巴并排列在斜日余辉之中。可是，除此而外，哪里也看不见小工们的影子。三个孩子诚惶诚恐地去推最边上的一辆斗车。三个人一齐使劲一推，斗车突然咕隆一晃，车轮转动起来了。这一声响吓得良平汗毛一下子竖了起来。但车轮第二次发出声响时，良平已经不再惊骇了。咕隆，咕隆……三个人的手一起推着斗车，斗车也随着这声响徐徐地沿着轨道往上爬。</p><p>没一会儿，斗车走出一二十米远，这时，轨道的坡度变陡了。三个人怎么使劲推，斗车也纹丝不动，甚至动辄有随着斗车一起被推回原处的可能。良平觉得已经可以了，于是就向比自己还小两岁的两个小孩打信号。</p><p>“来，上吧！”</p><p>他们同时松开了手，跳上斗车。起初，斗车只是徐徐而动，接着，眼看势头越来越猛，一口气从轨道上溜了下去。路上所向披靡，风景扑面而来，好像一下子一劈而二似地向两侧分开，并在眼前迅速展开。薄暮微风拂面，足下斗车跳动——良平仿佛羽化而登仙了。</p><p>不过，两三分钟之后，斗车回到了终点，在原处停下了。</p><p>“来，再推一次。”</p><p>良平和这两个比自己小的孩子一起，打算再一次往坡上推斗车。车轮还没起动，他们忽然听到背后有人的脚步声。不仅如此，他们刚听得脚步声传过来，这声音马上就变成了叫骂声。</p><p>“他妈的！是和谁打过招呼来动斗车的？”</p><p>一个高个子小工站在那儿，他身穿一件旧号衣，斗上戴着一顶已经过了时令的麦秸草帽。</p><p>——看到这种姿势，良平已经和两个小孩儿一起逃出十来米远了。——自那以后，良平有事外出归来时，即使看到斗车停在一个人影也不见的工地上，也不想第二次再乘乘看了。而那个小工叫骂时的姿态，一直到现在还清晰地铭刻在良平心上，在良平的脑海里留下了深刻的记忆。一顶小小的黄色麦秸草帽浮现在薄暮的微明之中。——不过，就连这样的记忆似乎也一年比一年模糊了。</p><p>又过了十几天，良平一个人来到工地，他站在那里看着斗车往上爬，这时正午已经过去了。除了装土的斗车之外，良平看到有一辆斗车载着枕木从铺设干线用的粗轨上往坡上爬。推这辆斗车的是两个年轻人。良平一见他俩，就感到他们身上有一种平易可亲的气氛。</p><p>“这样的人是不会训斥我的。”——良平这样想着，就向斗车奔去。</p><p>“叔叔，我也来帮你们推好吗？”</p><p>其中有一个人，——穿着有条纹的衬衣正埋头推着斗车的男工，果然不出良平所料，头也没抬一下，立即爽快地答了话。</p><p>“哦，来推吧。”</p><p>良平钻进两个男工之间，开始拼命地推起来。</p><p>“你这小鬼很有点劲啊。”</p><p>另一个男工，——他耳朵上夹着一支香烟，也这么称赞着良平。</p><p>推了一会儿之后，轨道的坡度逐渐变得平缓起来。“已经不用再推了。”——他们会不会马上说这话了呢？良平心里七上八下地嘀咕着。可是那两个年轻的小工还是闷声不响地继续推他们的斗车，只是腰板比刚才挺得更直了。良平终于忍耐不住，战战兢兢地试探着：“一直照这样推下去好吗？”</p><p>“当然好喽。”两个男工同时回答。</p><p>良平心想：“真是和蔼可亲的人。”</p><p>再往前推了五六百米远，轨道又一次碰上了陡坡。这里，两侧是蜜橘园，不少橙黄色的果实沐浴在阳光下。</p><p>“还是上坡好，这样，他们就可以一直让我推下去啦。”——良平心里这么想，一边使出全身的劲来推着斗车。</p><p>从蜜橘园中间往上推到最高处，轨道一下子急转直下。身穿条纹衬衣的男工对良平喊了声：“喂，上来。”良平立即举脚跃上斗车。在三个人附着车身乘上来的同时，斗车已扇动着蜜橘园里的香气，在轨道上一股劲儿飞快地滑动起来。“乘斗车比推斗车要美得多呢。”——良平让自己的外衣鼓着野风，一面想着这毋庸置疑的道理。“推着斗车前进的路程越长，回来时乘斗车的机会也越多。”——良平还这么想过。</p><p>斗车一来到竹丛区，慢慢地停止了飞驰。三个人又像方才那样，开始推起这辆沉重的斗车来。不知从什么时候起，竹丛已经不见了，代之而来的是杂树林。这里，上坡的路途上，到处都是落叶，连锈得发红的铁轨都几乎全被淹没了。沿着这条路，斗车好容易才登上坡顶。这时，只见蓝霞辽海展开在悬崖峭壁的那一边，洋面上寒意轻笼。与此同时，良平马上清清楚楚地意识到，已经走到过分远的地方来了。</p><p>三个人又乘上斗车，斗车沿着海的左边滑行，同时从杂树林的枝叶下钻过。不过，良平此时的感觉已不像方才那样兴致勃勃了。“斗车马上回去就好了。”——良平暗暗地祷念起来。当然，他自己也很清楚，不到达目的地，斗车也好，人也好，都还不能往回返。</p><p>接下来，斗车停在一个茶馆前，茶馆背靠开凿过的山岳，屋顶是用茅草葺的。两个小工一走进店里，就和背着乳儿的老板娘搭着腔，一边悠闲自得地又是喝茶又是吃点心。良平独自一人在斗车周围转着，心里焦躁不安。斗车底座坚实牢固，一路上飞溅在底座板上的泥巴这时已经干了。</p><p>过了一会儿，他们从茶馆出来，临出来的时候，那个耳朵上夹着香烟的男工(此时已经不见香烟夹在耳朵上了)，递给站在斗车旁的良平一包用报纸包着的粗点心。良平冷冰冰地说了声：“谢谢。”但他马上又感到，这么冷淡有点对不起那位男工。良平像是为了掩饰自己的冷淡，就拿起一块点心放进嘴里。大概是因为用报纸包的缘故吧，点心沾染了一股油墨味。</p><p>三个人一边推着斗车一边沿着平缓的斜坡往上爬。良平虽然手扶斗车，但是心不在焉，他在想着别的事。</p><p>沿这个山坡一直往前下到坡脚，这里又有一个茶馆，它和前面的那一个差不多。两个小工进入茶馆以后，良平坐在斗车上，一心记挂着回去的事。茶馆前的梅花已开放，照射在梅花上的夕阳在一点点地消失。“太阳就要下山了。”——良平这么一想，觉得不能再这么稀里糊涂地坐下去了。他时而踢踢斗车的车轮，尽管明明知道自己一个人没法动一下斗车，但还是哼哼唧唧地不时试着推一下车子，——他借此来排遣烦恼。</p><p>可是两个小工一出来，他们就把手搭在斗车的枕木上，一边漫不经心地对良平这样说：“你可以回去了。我们今天得在对面住一宿。”</p><p>“回家太晚了的话，你家里也许要不放心了呢。”</p><p>良平刹那间瞠目结舌地怔住了。天色快黑下来了，虽说去年岁暮时分，自己和母亲一起赶路去过岩村，可是今天的路程有去年三四倍远，而且现在必须自己一个人走回家去，——良平一下子明白过来是这么回事了。他几乎要哭出来，然而哭又何济于事呢？良平觉得现在不是哭的时候。他向这两个年轻的小工很不自然地鞠了个躬告辞之后，就拼命地顺着轨道跑步前进。</p><p>良平不顾一切地沿着轨道的一侧不停地奔跑着，过了一会儿，良平发觉兜里的那包点心变得碍手碍脚起来，他就把点心抛到路旁不要了，接着又把脚上的木底草履也脱下丢弃了。于是，小石子直接侵入到薄薄的布袜子里，不过脚倒是轻得多了。良平感觉到海洋是在左边，他就这样跑上了陡坡。有时眼泪要往上涌，脸就自然而然地歪扭了。——即使勉强忍住了泪，可鼻子总不停地抽嗒作响。</p><p>良平从竹丛边穿过时，日金山天际的晚霞已经开始消敛。良平越发焦虑不安起来。也许是去和来情况有所不一样的缘故吧，景色的不同也令人担心和不安。这时，良平感到衣服都已经被汗水所浸透，但自己还得像刚才那样继续拼命赶路，于是他就把和服外褂脱下丢在路边了。</p><p>来到蜜橘园的时候，周围越来越暗了。“只要能保住性命——”良平一边这样想着，一边连滑带跌地继续赶路。</p><p>好不容易在远处的暮霭当中显出村边工地的影子。这时，良平咬咬牙不由得要哭，他哭丧着脸，但终于没有哭出来，又继续向前奔跑起来。</p><p>进入自己的村子一看，左右两侧的人家，电灯都已经亮了。在电灯光下，良平自己也很清楚地看到，从他汗涔涔的头上直冒热气。正在井边汲水的妇女们，以及正从田里归来的男人们，看到良平气吁吁地跑来，都向着良平发问：“嗳，怎么回事啊？”然而良平却默默无言地从杂货店、理发店这些通亮的房屋前奔了过去。</p><p>良平一跑进自己家门，终于止不住扯着嗓子哇地哭出了声音。这一声哭喊，一下子就使父母亲聚集到良平身边来了。尤其是母亲，她一面说着些什么一面抱起良平来。可是良平拳打脚踢地折腾着，一边还在继续不停地啜泣。大概是因良平的哭声太厉害了，住在邻近的三四个妇女也集聚到良平家昏暗的大门口来了。父母亲当然是不消说了，连门口的这些人也都异口同声地询问起良平哭泣的原因来。可是无论问什么，良平只好一门心思地大声哭泣。打那么远的地方一鼓作气地跑来，只要一回想起刚才路上的凄凉，良平觉得，无论自己怎么放开嗓子不停地啼哭，总有一种没法得到满足的情绪在向自己袭来……</p><p>良平在二十六岁的那一年，带着妻子儿女一起来到东京。这时，他在一个杂志社的二楼，手拿红笔做着校对工作。可是，不知怎么一来，而且毫无理由，良平有时会回忆起自己小时候的那件事情。毫无理由可循吗？——尘世的操劳使良平疲于奔命，他眼前浮现出一条道路，它和从前的那条一样，路上，竹林昏暗微明，坡道陂陀起伏，是一条细细长长、断断续续的道路……</p><p>(芥川龙之介)</p>]]></content>
      
      
      <categories>
          
          <category> 文章分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
